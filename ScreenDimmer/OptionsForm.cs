using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;

namespace ScreenDimmer
{
    public class OptionsForm : Form
    {
        //
        //  <ATTRIBUTES AND CONSTANTS>
        //

        // strings used for messages generated by exceptions
        private const string BaseExceptionMessage =
            "Press \"OK\" if you would like to create a new XML file with the default settings. " +
            "Otherwise, press \"Cancel\" to exit the program.";
        private const string ArgumentNullExceptionMessage =
            "XML file contains an empty tag. " +
            "Please check if the settings.xml file is valid.\n\n" +
            BaseExceptionMessage;
        private const string FormatExceptionMessage =
            "XML file contain an invalid value. " +
            "Please check the settings.xml file for invalid values.\n\n" +
            BaseExceptionMessage;
        private const string OverflowExceptionMessage =
            "XML file contain an extremely large value. " +
            "Please check the settings.xml file for extremely large numerical values.\n\n" +
            BaseExceptionMessage;
        private static readonly string ArgumentOutOfRangeExceptionMessage =
            "XML file contains screen values that are too large or too small. " +
            "Please check the settings.xml file for very large or small numerical values.\n\n" +
            "ScreenDimmer allows (for single or aggregated screens):\n" +
            "\tScreen position (origin) of " +
            ScreenInfo.MinOriginX + " to " + ScreenInfo.MaxOriginX + " for the x-axis, and" +
            ScreenInfo.MinOriginY + " to " + ScreenInfo.MaxOriginY + " for the y-axis\n" +
            "\tScreen resolution of " + ScreenInfo.MinRes + " to " + ScreenInfo.MaxRes + "\n\n" +
            BaseExceptionMessage;

        private List<ScreenInfo> screen_list;
        private ScreenInfo basic_screen;
        private bool basic_options;
        private TabControl tab_control;

        //
        //  </ATTRIBUTES AND CONSTANTS>
        //



        //
        //  <CONSTRUCTORS>
        //

        // default constructor
        // used when "settings.xml" is not found, or contains invalid values
        public OptionsForm()
        {
            screen_list = new List<ScreenInfo>();
            DefaultScreenList();

            InitializeForm();
            InitializeTabs();
        }

        // constructor for valid XML document
        // XAttributes can have invalid values
        public OptionsForm(XDocument xml)
        {
            bool use_default_values = false;
            screen_list = new List<ScreenInfo>();

            var screens = xml.Descendants("screen");

            // get the options from the XML file
            try
            {
                XElement options = xml.Descendants("options").First();
                basic_options = Boolean.Parse(options.Attribute("basic").Value);
            }
            catch (ArgumentNullException)
            { use_default_values = ExceptionMessageBox(ArgumentNullExceptionMessage, "Warning: ArgumentNullException"); }
            catch (FormatException)
            { use_default_values = ExceptionMessageBox(FormatExceptionMessage, "Warning: FormatException"); }

            // copy screen information from the XML file
            foreach (XElement screen in screens)
            {
                if (use_default_values)
                    break;

                // ensure that the XML file does not have invalid values
                try
                {
                    ScreenInfo scrn_info = new ScreenInfo(screen);

                    // ignore screens that do not appear in Screen.AllScreens
                    // they will not be added to screen_list, so they should not get their own tab
                    foreach (Screen scrn in Screen.AllScreens)
                    {
                        if (scrn.DeviceName == scrn_info.Name)
                        {
                            screen_list.Add(scrn_info);
                            break;
                        }
                    }
                }
                catch (ArgumentNullException)
                { use_default_values = ExceptionMessageBox(ArgumentNullExceptionMessage, "Warning: ArgumentNullException"); }
                catch (FormatException)
                { use_default_values = ExceptionMessageBox(FormatExceptionMessage, "Warning: FormatException"); }
                catch (OverflowException)
                { use_default_values = ExceptionMessageBox(OverflowExceptionMessage, "Warning: OverflowException"); }
                catch (ArgumentOutOfRangeException)
                { use_default_values = ExceptionMessageBox(ArgumentOutOfRangeExceptionMessage, "Warning: ArgumentOutOfRangeException"); }
            }


            if (use_default_values)
            {
                screen_list.Clear();
                DefaultScreenList();
            }
            // otherwise, search for new screens
            else
            {
                foreach (Screen scrn in Screen.AllScreens)
                {
                    bool found = false;
                    foreach (ScreenInfo scrn_info in screen_list)
                    {
                        if (scrn_info.Name.Equals(scrn.DeviceName))
                        { found = true; break; }
                    }
                    if (!found)
                        screen_list.Add(NewScreen(scrn));
                }
            }

            InitializeForm();
            InitializeTabs();
        }

        //
        //  </CONSTRUCTORS>
        //



        //
        //  <HELPER METHODS>
        //

        // populate screen_list with found screens at default values
        private void DefaultScreenList()
        {
            foreach (Screen scrn in Screen.AllScreens)
                screen_list.Add(NewScreen(scrn));
        }

        private ScreenInfo NewScreen(Screen scrn)
        {
            string name = scrn.DeviceName;
            int originX = scrn.Bounds.X;
            int originY = scrn.Bounds.Y;
            int resX = scrn.Bounds.Width;
            int resY = scrn.Bounds.Height;
            return new ScreenInfo(name, originX, originY, resX, resY);
        }

        // show MessageBox for exceptions thrown during the constructor for valid XML documents
        private bool ExceptionMessageBox(string msg, string title)
        {
            DialogResult res = MessageBox.Show(msg, title, MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
            if (res == DialogResult.OK)
                return true;
            else
                Application.Exit();
            return false;
        }

        // initializes the attributes associated with this form
        private void InitializeForm()
        {
            // set size of form, disallow resizing
            this.Size = new Size(400, 300);
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.MinimizeBox = false;

            tab_control = new TabControl();
        }

        // create tabs for general options menu and individual screens
        private void InitializeTabs()
        {
            this.SuspendLayout();

            tab_control.Dock = DockStyle.Fill;
            tab_control.Name = "tab_control";
            Controls.Add(tab_control);

            this.ResumeLayout();
        }

        //
        //  </HELPER METHODS>
        //
    }
}
