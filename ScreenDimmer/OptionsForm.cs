using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml.Linq;

namespace ScreenDimmer
{
    public class OptionsForm : Form
    {
        //
        //  <ATTRIBUTES AND CONSTANTS>
        //

        // strings used for messages generated by exceptions
        private const string BaseExceptionMessage =
            "Press \"OK\" if you would like to create a new XML file with the default settings. " +
            "Otherwise, press \"Cancel\" to exit the program.";
        private const string ArgumentNullExceptionMessage =
            "XML file contains an empty tag. " +
            "Please check if the settings.xml file is valid.\n\n" +
            BaseExceptionMessage;
        private const string FormatExceptionMessage =
            "XML file contain an invalid value. " +
            "Please check the settings.xml file for invalid values.\n\n" +
            BaseExceptionMessage;
        private const string OverflowExceptionMessage =
            "XML file contain an extremely large value. " +
            "Please check the settings.xml file for extremely large numerical values.\n\n" +
            BaseExceptionMessage;
        private static readonly string ArgumentOutOfRangeExceptionMessage =
            "XML file contains screen values that are too large or too small. " +
            "Please check the settings.xml file for very large or small numerical values.\n\n" +
            "ScreenDimmer allows (for single or aggregated screens):\n" +
            "\tScreen position (origin) of " +
            ScreenInfo.MinOriginX + " to " + ScreenInfo.MaxOriginX + " for the x-axis, and" +
            ScreenInfo.MinOriginY + " to " + ScreenInfo.MaxOriginY + " for the y-axis\n" +
            "\tScreen resolution of " + ScreenInfo.MinRes + " to " + ScreenInfo.MaxRes + "\n\n" +
            BaseExceptionMessage;
        private const double DEFAULT_OPACITY = 0.3;

        private List<ScreenInfo> screen_list;
        private ScreenInfo basic_screen;
        private bool use_basic_screen;
        private TabControl tab_control;

        //
        //  </ATTRIBUTES AND CONSTANTS>
        //



        //
        //  <CONSTRUCTORS>
        //

        // default constructor
        // used when "settings.xml" is not found, or contains invalid values
        public OptionsForm()
        {
            screen_list = new List<ScreenInfo>();
            DefaultScreenList();

            InitializeForm();
            InitializeTabs();
        }

        // constructor for valid XML document
        // XAttributes can have invalid values
        public OptionsForm(XDocument xml)
        {
            bool use_default_values = false;
            screen_list = new List<ScreenInfo>();

            var screens = xml.Descendants("screen");

            // get the options and basic screen information from the XML file
            try
            {
                XElement options = xml.Descendants("options").First();
                use_basic_screen = Boolean.Parse(options.Element("useAggregated").Value);

                XElement basic = xml.Descendants("basicscreen").First();
                int originX = Int32.Parse(basic.Element("left").Value);
                int originY = Int32.Parse(basic.Element("up").Value);
                int resX = Int32.Parse(basic.Element("right").Value) - originX;
                int resY = Int32.Parse(basic.Element("down").Value) - originY;
                bool basic_enabled = Boolean.Parse(basic.Element("enabled").Value);
                double opacity = Double.Parse(basic.Element("opacity").Value);

                basic_screen = new ScreenInfo("basic", 0, originX, originY, resX, resY, opacity);
                if (use_basic_screen && basic_enabled)
                    basic_screen.Show();
            }
            catch (ArgumentNullException)
            { use_default_values = ExceptionMessageBox(ArgumentNullExceptionMessage, "Warning: ArgumentNullException"); }
            catch (FormatException)
            { use_default_values = ExceptionMessageBox(FormatExceptionMessage, "Warning: FormatException"); }
            catch (OverflowException)
            { use_default_values = ExceptionMessageBox(OverflowExceptionMessage, "Warning: OverflowException"); }
            catch (ArgumentOutOfRangeException)
            { use_default_values = ExceptionMessageBox(ArgumentOutOfRangeExceptionMessage, "Warning: ArgumentOutOfRangeException"); }

            // copy screen information from the XML file
            foreach (XElement screen in screens)
            {
                if (use_default_values)
                    break;

                // ensure that the XML file does not have invalid values
                try
                {
                    ScreenInfo scrn_info = new ScreenInfo(screen);

                    // ignore screens that do not appear in Screen.AllScreens
                    // they will not be added to screen_list, so they should not get their own tab
                    foreach (Screen scrn in Screen.AllScreens)
                    {
                        if (scrn.DeviceName == scrn_info.Name)
                        {
                            screen_list.Add(scrn_info);
                            break;
                        }
                    }

                    bool screen_enabled = Boolean.Parse(screen.Element("enabled").Value);
                    if (!use_basic_screen && screen_enabled)
                        scrn_info.Show();
                }
                catch (ArgumentNullException)
                { use_default_values = ExceptionMessageBox(ArgumentNullExceptionMessage, "Warning: ArgumentNullException"); }
                catch (FormatException)
                { use_default_values = ExceptionMessageBox(FormatExceptionMessage, "Warning: FormatException"); }
                catch (OverflowException)
                { use_default_values = ExceptionMessageBox(OverflowExceptionMessage, "Warning: OverflowException"); }
                catch (ArgumentOutOfRangeException)
                { use_default_values = ExceptionMessageBox(ArgumentOutOfRangeExceptionMessage, "Warning: ArgumentOutOfRangeException"); }
            }

            // if there was an error in the XML file, recreate screen_list using AllScreens
            if (use_default_values)
            {
                screen_list.Clear();
                DefaultScreenList();
            }

            InitializeForm();
            InitializeTabs();
        }

        //
        //  </CONSTRUCTORS>
        //



        //
        //  <HELPER METHODS>
        //

        // populate screen_list with found screens at default values
        private void DefaultScreenList()
        {
            foreach (Screen scrn in Screen.AllScreens)
                screen_list.Add(NewScreen(scrn, screen_list.Count + 1));
        }

        private ScreenInfo NewScreen(Screen scrn, int index)
        {
            string name = scrn.DeviceName;
            int originX = scrn.Bounds.X;
            int originY = scrn.Bounds.Y;
            int resX = scrn.Bounds.Width;
            int resY = scrn.Bounds.Height;
            return new ScreenInfo(name, originX, originY, resX, resY, index, DEFAULT_OPACITY);
        }

        // show MessageBox for exceptions thrown during the constructor for valid XML documents
        private bool ExceptionMessageBox(string msg, string title)
        {
            DialogResult res = MessageBox.Show(msg, title, MessageBoxButtons.OKCancel, MessageBoxIcon.Warning);
            if (res == DialogResult.OK)
                return true;
            else
                Application.Exit();
            return false;
        }

        // searches for new screens
        // fixes position and resolution of existing screens
        // rebuilds basic screen if necessary
        private void DetectScreens()
        {
            bool recreate_basic_screen = false;
            int basic_left = 0, basic_right = 0, basic_up = 0, basic_down = 0;

            // search for new screens using Screen.AllScreens
            foreach (Screen scrn in Screen.AllScreens)
            {
                bool found = false;
                int x = scrn.Bounds.X;
                int y = scrn.Bounds.Y;
                int w = scrn.Bounds.Width;
                int h = scrn.Bounds.Height;

                // find ScreenInfo representation of Screen object 
                foreach (ScreenInfo scrn_info in screen_list)
                {
                    if (scrn_info.Name.Equals(scrn.DeviceName))
                    {
                        // check if information stored is still accurate
                        bool originX_check = scrn_info.OriginX != x;
                        bool originY_check = scrn_info.OriginY != y;
                        bool resX_check = scrn_info.ResolutionX != w;
                        bool resY_check = scrn_info.ResolutionY != h;

                        if ( originX_check || originY_check || resX_check || resY_check )
                        {
                            scrn_info.OriginX = x;
                            scrn_info.OriginY = y;
                            scrn_info.ResolutionX = w;
                            scrn_info.ResolutionY = h;

                            recreate_basic_screen = true;
                        }

                        found = true;
                        break;
                    }
                }
                if (!found)
                    screen_list.Add(NewScreen(scrn, screen_list.Count + 1));

                // get largest screen size
                if (basic_left > x)
                    basic_left = x;
                if (basic_up > y)
                    basic_up = y;
                if (basic_right < x + w)
                    basic_right = x + w;
                if (basic_down < y + h)
                    basic_down = y + h;
            }

            // recreate basic screen if necessary
            if (recreate_basic_screen)
            {
                basic_screen.OriginX = basic_left;
                basic_screen.OriginY = basic_up;
                basic_screen.ResolutionX = basic_right - basic_left;
                basic_screen.ResolutionY = basic_down - basic_up;
            }
        }

        // initializes the attributes associated with this form
        private void InitializeForm()
        {
            // set size of form, disallow resizing
            this.Size = new Size(400, 300);
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.MinimizeBox = false;

            tab_control = new TabControl();
        }

        // create tabs for general options menu and individual screens
        private void InitializeTabs()
        {
            this.SuspendLayout();

            tab_control.Dock = DockStyle.Fill;
            tab_control.Name = "tab_control";

            // general options tab
            TabPage general_tab = new TabPage();
            general_tab.Name = "General";

            Label general_tab_text = new Label();
            general_tab_text.Text = "hello";
            general_tab_text.Size = new Size(100, 50);
            general_tab_text.Font = new Font("Calibri", 10F);
            general_tab.Controls.Add(general_tab_text);
            tab_control.TabPages.Add(general_tab);
            
            this.Controls.Add(tab_control);
            this.ResumeLayout();
        }

        //
        //  </HELPER METHODS>
        //
    }
}
